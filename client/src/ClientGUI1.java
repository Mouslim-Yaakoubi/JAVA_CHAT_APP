





/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import java.awt.event.ActionEvent;

import java.awt.event.KeyEvent;
import java.io.*;
import java.net.Socket;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.JFileChooser;

/**
 *
 * @author Oy
 */
public class ClientGUI1 extends javax.swing.JFrame {
    private String name;
    private String ip;
    private int port;
    private boolean ready;
    private String c_input;
    private boolean stop;
    /**
     * Creates new form ClientGUI
     */
    public ClientGUI1() {
        initComponents();
        this.name = "mos";
        this.ip = "localhost";
        this.port = 5000;
        this.ready = false;
        this.c_input = "";
        this.stop = false;
  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        input = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        enter_name = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        client_ip = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        client_port = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        file = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(246, 246, 246));
        setFocusable(false);
        setPreferredSize(new java.awt.Dimension(760, 462));

        input.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                input_given(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/examples/icons/icons8-start-45.png"))); // NOI18N
        jButton1.setText("START");
        jButton1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mouse_pressed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/examples/icons/icons8-start-45 (1).png"))); // NOI18N
        jButton2.setText("STOP");
        jButton2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                stop_clicked(evt);
            }
        });

        enter_name.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        enter_name.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        enter_name.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        enter_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enter_nameActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/examples/icons/icons8-name-40.png"))); // NOI18N
        jLabel2.setText("NAME");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/examples/icons/icons8-chat-60(1).png"))); // NOI18N
        jLabel1.setText("WEEchat");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/examples/icons/icons8-ip-40 (2).png"))); // NOI18N
        jLabel3.setText("IP_Address");

        client_ip.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        client_ip.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        client_ip.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        client_ip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                client_ipActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/examples/icons/icons8-dialing-number-40.png"))); // NOI18N
        jLabel4.setText("PORT");

        client_port.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        client_port.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        client_port.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        client_port.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                client_portActionPerformed(evt);
            }
        });

        display.setEditable(false);
        display.setBackground(new java.awt.Color(255, 255, 255));
        display.setColumns(20);
        display.setFont(new java.awt.Font("Serif", 1, 13)); // NOI18N
        display.setRows(5);
        jScrollPane2.setViewportView(display);

        file.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        file.setIcon(new javax.swing.ImageIcon(getClass().getResource("/examples/icons/icons8-file-45.png"))); // NOI18N
        file.setText("FILE");
        file.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        file.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                attach_file(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enter_name)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(file, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(18, 18, 18)
                            .addComponent(client_ip, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(client_port, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(input, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(198, 198, 198))
            .addGroup(layout.createSequentialGroup()
                .addGap(309, 309, 309)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(client_port, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(client_ip, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enter_name, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(file, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void client_ipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_client_ipActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_client_ipActionPerformed

    private void client_portActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_client_portActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_client_portActionPerformed

    private void mouse_pressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouse_pressed
        // TODO add your handling code here:
        ready = true;
           
        
    }//GEN-LAST:event_mouse_pressed

    private void enter_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enter_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enter_nameActionPerformed

    private void input_given(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_input_given
        // TODO add your handling code here:
        
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            
            c_input = input.getText();
            
        }
    }//GEN-LAST:event_input_given

    private void attach_file(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attach_file
                                      
        JFileChooser get_file = new JFileChooser();
        get_file.setDialogTitle("Choose a file to send");
        
        if (get_file.showOpenDialog(null) == JFileChooser.APPROVE_OPTION){
            c_input = "file:"+get_file.getSelectedFile().getAbsolutePath();
            System.out.println(c_input);
            
        }
          // TODO add your handling code here:
    }//GEN-LAST:event_attach_file

    private void stop_clicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stop_clicked
        // TODO add your handling code here:
        stop = true;
    }//GEN-LAST:event_stop_clicked
    
        /*private String client_input(java.awt.event.KeyEvent evt) {
            c_input = "";
            while(c_input.isEmpty()){
                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    c_input = input.getText();
                }
            }
            return c_input;
        }*/

    
            
    public static void initiate(ClientGUI1 client){
        while(client.ready == false){
            System.out.println(client.ready);
            
            
           
            if(client.ready == true){
                
                client.ip = client.client_ip.getText();
                client.name =  client.enter_name.getText();
                if(!client.client_port.getText().isEmpty()){
                    client.port = Integer.parseInt(client.client_port.getText());
                }
                System.out.println(client.ip);
                System.out.println(client.port);
                System.out.println(client.name);
                

                try (Socket socket = new Socket(client.ip, client.port)) {
                    PrintWriter output = new PrintWriter(socket.getOutputStream(), true);
                    BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    DataOutputStream fileOutput;
                    fileOutput = new DataOutputStream(socket.getOutputStream());
                    KeyEvent enterKeyEvent = new KeyEvent(client.input, KeyEvent.KEY_PRESSED, System.currentTimeMillis(),0, KeyEvent.VK_ENTER, '\n');
                    String userInput = "";
                    
  
                    client.display.append(">> You are connected to the server\n");
                    FileClientThread clientThread = new FileClientThread(socket, input,client.display);
                    clientThread.start();

                    String clientName = client.name;
                   
                    while (true) {
                        if(client.stop == true || client.c_input.equals("exit") ){
                            break;
                        }
                        
              
                        if(!"".equals(client.c_input)){
                            
                            
                            System.out.println(client.c_input);
                            
                        // Perform your actions with userInput
                        
                          

                           
                            if (client.c_input.startsWith("file:")) {
                                output.println(client.c_input);
                                File file = new File(client.c_input.substring(5));
                                sendFile(file, fileOutput);
                            }  
                            else if(!client.c_input.startsWith("file:")){

                                output.println(clientName + " : " + client.c_input);
                                client.display.append(">> YOU : "+client.c_input +"\n");

                            }
                            
                            
                            client.c_input = "";
                            client.input.setText(client.c_input);
                        }
                        
                        
                        
                    }
                    output.println("exit");
                    client.display.setText("");
                    client.ready = false;
                    client.c_input = "";
                    client.stop = false;
                    socket.close();
                    initiate(client);
                } catch (IOException e) {
                    client.display.append("Connection not established!\n");
                                    }
            }
            
        }
        
    
        
    }
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGUI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        ClientGUI1 client = new ClientGUI1();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            client.setVisible(true);
        });
        initiate(client);
    }

    /*private static void sendFile(String path, DataOutputStream file_out, javax.swing.JTextArea display) {
        try (FileInputStream fileInputStream = new FileInputStream(path)) {
            File file = new File(path);

            // send file size
            file_out.writeLong(file.length());
            file_out.flush();

            // break file into chunks
            byte[] buffer = new byte[4 * 1024];
            int bytes;
            while ((bytes = fileInputStream.read(buffer)) != -1) {
                file_out.write(buffer, 0, bytes);
                file_out.flush();
            }

            // Ensure all data is sent before closing the stream
            file_out.flush();

            display.append("File Transfer Completed\n");
        } catch (Exception e) {
            display.append("File Transfer Failed\n");
              // Handle the exception appropriately
        }
    }*/
    public static void sendFile(File file, OutputStream outputStream) throws IOException {
        FileInputStream fileInputStream = null;
        try {
            byte[] buffer = new byte[1024];
            fileInputStream = new FileInputStream(file);
            long startTime = System.currentTimeMillis();
            while ((System.currentTimeMillis() - startTime) < 5000) {
                int bytesRead = fileInputStream.read(buffer);
                if (bytesRead == -1) {
                    break; // End of file
                }
                outputStream.write(buffer, 0, bytesRead);
            }
            outputStream.flush();
        } finally {
            if (fileInputStream != null) {
                fileInputStream.close();
            }
            
        }
    }
    
   

    private String listen(javax.swing.JTextField input,javax.swing.JTextArea display){
        c_input = "";
        input.addActionListener((ActionEvent e) -> {
            c_input = input.getText();
        });
        return c_input;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField client_ip;
    private javax.swing.JTextField client_port;
    private javax.swing.JTextArea display;
    private javax.swing.JTextField enter_name;
    private javax.swing.JButton file;
    private javax.swing.JTextField input;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}

class FileClientThread extends Thread {
    private final Socket socket;
    private final BufferedReader input;
    private final DataInputStream fileInput;
    private String fileName;
    private int number;
    private final javax.swing.JTextArea display;
    private String ext;
    private boolean running;
    

    public FileClientThread(Socket socket, BufferedReader input, javax.swing.JTextArea display) throws IOException {
        this.socket = socket;
        this.input = input;
        this.fileInput = new DataInputStream(socket.getInputStream());
        this.number = 0;
        this.fileName = "file";
 
        this.display =  display;
        this.ext = ".txt";
        this.running = false;
    }

    @Override
    public void run() {
        try {
            
            while (true) {
                String response = input.readLine();
                
               
                if (response.equals("exit")) {
                    break;
                }
                
                
                if(response.startsWith("file:")){
                    
                    ext =  extension(response);
                    System.out.println(ext);
                    fileName = "file" + number+"."+ext;
                    String path = "C:/Users/Oy/Desktop/received_files/"+fileName;
                    File file = new File(path);
                    System.out.println(file);
                    receiveFile(file,fileInput);
                    number += 1; 
                    System.out.println(fileName);
                    running = false;
                    
                }
                else{
                    display.append(">> "+response+"\n");
                }
                
                
                
            }
        } catch (IOException e) {
        } finally {
            try {
                socket.close();
            } catch (IOException e) {
            }
        }
    }
    
    
    public static void receiveFile(File file, InputStream inputStream) throws IOException {
        FileOutputStream fileOutputStream = null;
        try {
            byte[] buffer = new byte[1024];
            int bytesRead;
            fileOutputStream = new FileOutputStream(file);
            long startTime = System.currentTimeMillis();
            while ((System.currentTimeMillis() - startTime) < 5000) {
                if (inputStream.available() > 0) {
                    bytesRead = inputStream.read(buffer);
                    if (bytesRead == -1) {
                        break;  // End of stream
                    }
                    fileOutputStream.write(buffer, 0, bytesRead);
                } 
            }
            fileOutputStream.flush();
        }
        finally {
            if (fileOutputStream != null) {
                fileOutputStream.close();
            }
            
        }
    }
    /*private void receiveFile(String folder, String fileName, DataInputStream fileInput) throws IOException {
        int bytes = 0;
        String path = folder + fileName;
        File file = new File(path);

        // Extract the directory path without the file name
        String directoryPath = file.getParent();
        File directory = new File(directoryPath);

        // Check if the directory exists, create it if not
        if (!directory.exists()) {
            directory.mkdirs();
        }

        try (FileOutputStream fileOutputStream = new FileOutputStream(file)) {
            long size = fileInput.readLong(); // read file size
            byte[] buffer = new byte[4 * 1024];
            while (size > 0) {
                int bytesRead = fileInput.read(buffer, 0, (int) Math.min(buffer.length, size));
                if (bytesRead == -1) {
                    throw new IOException("Unexpected end of stream while reading file content.");
                }
                fileOutputStream.write(buffer, 0, bytesRead);
                size -= bytesRead; // decrement remaining file size
                if(size <= 0){
                    break;
                }
            }
            fileOutputStream.close();
        }
        catch(Exception e){
            display.append("File reception failed");
        }
    }*/
    private String extension(String the_mssg){
        int dotIndex = the_mssg.lastIndexOf('.');
        String fileExtension = "";
        // Check if a dot was found and if it's not the last character in the file name
        if (dotIndex > 0 && dotIndex < the_mssg.length() - 1) {
            // Extract the file extension
            fileExtension = the_mssg.substring(dotIndex + 1);
            System.out.println("File Extension: " + fileExtension);
        } else {
            System.out.println("No file extension found");
        }
        return fileExtension; 
    }
}

